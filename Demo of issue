/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #98ff00 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[91.71146148381821, 22.067618064973296],
          [91.71146148381821, 20.614582872441776],
          [92.51346343694321, 20.614582872441776],
          [92.51346343694321, 22.067618064973296]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// DESCRIPTION:

//   Code exports geotiffs of winter composites for each year 2016-2023
//   Code also vectorizes one geotiff and collects zonal stats about the land cover
//   classification over time.
//   Code determines if the sample grid-cell is within or outside of a protected area
//   Code calculates the minimum distance to the nearest refugee camp
//   Exported data used to execute a matching DID robustness check with alternative
//   dataframe than bespoke mapping


//////////////////////////////////////////////////////////////////////////////////
//
//Call on data
//
//////////////////////////////////////////////////////////////////////////////////

//Cox Bazar shapefile
var roi= ee.FeatureCollection("users/salem043/Bangladesh/CB_with_added_upazila");

//LULC classifications subset to ROI
var lulc = ee.ImageCollection("GOOGLE/DYNAMICWORLD/V1")
 .map(function(image){return image.clip(geometry)})
 .select("label");

//////////////////////////////////////////////////////////////////////////////////
//
//Generate, map and export modal composites (Jan and Feb)
//
//////////////////////////////////////////////////////////////////////////////////

//Jan 2016-Feb 2016
var lc_16 = lulc
  .filterDate("2016-01-01", "2016-02-28")
  .map(function(image){return image.clip(roi)})
 .reduce(ee.Reducer.mode());


//////////////////////////////////////////////////////////////////////////////////
//
//Vectorize a raster and generate a feature collection of centroids
//
//////////////////////////////////////////////////////////////////////////////////

// Add pixel coordinates with the appropriate projection
var coordinates = ee.Image.pixelCoordinates(lc_16.projection());

// Compute a truly unique ID for each pixel
var uniquePixels = coordinates.select('x').multiply(1e6) // Scale 'x' to a large number
                              .add(coordinates.select('y')); // Add 'y' to make it unique
uniquePixels = uniquePixels.toInt(); // Cast to integer

// Vectorize the unique ID image to ensure each pixel becomes a separate polygon
var grid = uniquePixels.reduceToVectors({
  geometryType: 'polygon',
  reducer: ee.Reducer.countEvery(),
  scale: 10, // Ensure this matches your desired resolution
  maxPixels: 1e13,
  geometry: roi
});

Map.addLayer(grid, {}, "Grid");

