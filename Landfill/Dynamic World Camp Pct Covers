/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #98ff00 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[91.71146148381821, 22.067618064973296],
          [91.71146148381821, 20.614582872441776],
          [92.51346343694321, 20.614582872441776],
          [92.51346343694321, 22.067618064973296]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//////////////////////////////////////////////////////////////////////////////////

// DESCRIPTION:

//   Code exports geotiffs of winter composites for each year 2016-2023
//   Code also vectorizes one geotiff and collects zonal stats about the land cover
//   classification over time.
//   Code determines if the sample grid-cell is within or outside of a protected area
//   Code calculates the minimum distance to the nearest refugee camp
 
//////////////////////////////////////////////////////////////////////////////////
//
//Call on data
//
//////////////////////////////////////////////////////////////////////////////////

//Refugee camps
var camps = ee.FeatureCollection("users/salem043/Bangladesh/Cox_Bazar_Simple_Borders");
Map.addLayer(camps);

var camps = camps.union();

//LULC classifications subset to ROI
var lulc = ee.ImageCollection("GOOGLE/DYNAMICWORLD/V1")
 .map(function(image){return image.clip(camps)})
 .select("label");


//////////////////////////////////////////////////////////////////////////////////
//
// Determine dry season (Jan-Feb) composites for zonal statistics
//
//////////////////////////////////////////////////////////////////////////////////

 
//Jan 2017 to Feb 2017
var lc_17 = lulc
  .filterDate("2017-01-01", "2017-02-28")
.reduce(ee.Reducer.mode());
 

// //////////////////////////////////////////////////////////////////////////////////
// //
// // Map winter season composites
// //
// //////////////////////////////////////////////////////////////////////////////////

var dwVisParams = {
  min: 0, max:8,
  palette: ['#419bdf', '#397d49', '#88b053', '#7a87c6', '#e49635', '#dfc35a', '#c4281b', '#a59b8f', '	#b39fe1']
};

Map.centerObject(camps);

// // //Map LULC
// // Map.addLayer(lc_16, dwVisParams, 'Land cover 2016');
Map.addLayer(lc_17, dwVisParams, 'Land cover 2017');
// // Map.addLayer(lc_18, dwVisParams, 'Land cover 2018');
// // Map.addLayer(lc_19, dwVisParams, 'Land cover 2019');
// // Map.addLayer(lc_20, dwVisParams, 'Land cover 2020');
// // Map.addLayer(lc_21, dwVisParams, 'Land cover 2021');
// // Map.addLayer(lc_22, dwVisParams, 'Land cover 2022');



/////////////////////////////////////////////////////////////////////////////////
//
// Map zonal statistics: defining reclassification function
//
//////////////////////////////////////////////////////////////////////////////////

// Define a reclassification function
var reclassifyImage = function(image, reclassRules) {
  var reclassified = image;
  for (var rule in reclassRules) {
    var classValue = reclassRules[rule][0]; // Original class value
    var newValue = reclassRules[rule][1]; // New class value
    reclassified = reclassified.where(image.eq(classValue), newValue);
  }
  return reclassified;
};

//////////////////////////////////////////////////////////////////////////////////
//
// Zonal statistics: percent grasslands cover
//
//////////////////////////////////////////////////////////////////////////////////


// Define your reclassification rules as an object
var reclassRules = {
  'Water': [0, 0],
  'Trees': [1, 0],
  'Grasslands': [2, 1],
  'Flooded Vegetation': [3, 0],
  'Crops': [4, 0],
  'Shrubland/Scrubland': [5, 0],
  'Built Area': [6, 0],
  'Bare Ground': [7, 0],
  'Snow and Ice': [8, 0]
};

// Reclassify every data year into a forset
var dta_2017 = reclassifyImage(lc_17, reclassRules);



//Apply reducer to 2017
var tiles = dta_2017.reduceRegions({
  collection: camps,
  reducer: ee.Reducer.mean().setOutputs(["grass_2017"]),
  scale: 10, 
});

print(tiles);