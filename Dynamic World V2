/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #98ff00 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[91.71146148381821, 22.067618064973296],
          [91.71146148381821, 20.614582872441776],
          [92.51346343694321, 20.614582872441776],
          [92.51346343694321, 22.067618064973296]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
 
//Call on data
//////////////////////////////////////////////////////////////////////////////////

//Cox Bazar shapefile
var roi = ee.FeatureCollection("FAO/GAUL/2015/level2").
filter(ee.Filter.eq("ADM2_NAME", "Cox's Bazar"));

//LULC classifications subset to ROI
var lulc = ee.ImageCollection("GOOGLE/DYNAMICWORLD/V1")
 .map(function(image){return image.clip(geometry)})
 .select("label");

//Refugee camps


//Create sample grid-cells (1.1 km by 1.1 km)
//////////////////////////////////////////////////////////////////////////////////

var tiles = tile(roi, 0.01); //TURN BACK TO 0.01 deg!

function tile(region, size_in_degrees) {
  function tile_geometry(geometry) {
    var coords = ee.List(geometry.bounds().coordinates().get(0))
    var min_point = ee.List(coords.get(0))
    var max_point = ee.List(coords.get(2))
  
    function sequence(direction) {
      var start = min_point.get(direction)  
      var stop = ee.Number(max_point.get(direction))
      return ee.List.sequence(start, stop, size_in_degrees)
    }
  
    var tiles = sequence(0).map(function (x) {
      return sequence(1).map(function (y) { 
          return ee.Feature(ee.Geometry.Rectangle([
            [ee.Number(x), ee.Number(y)],
            [
              ee.Number(x).add(size_in_degrees).min(max_point.get(0)),
              ee.Number(y).add(size_in_degrees).min(max_point.get(1))
            ]
        ]).intersection(geometry, 30))
      })
  	}).flatten()
    return ee.FeatureCollection(tiles).filterBounds(geometry)
  }

  function tile_feature_collection(feature_collection) {
    return ee.FeatureCollection(
      feature_collection.iterate(
        function (feature, acc) {
          return ee.FeatureCollection(acc).merge(tile_geometry(ee.Feature(feature).geometry()))
        }, ee.FeatureCollection([]))
    )
  }

  if (region instanceof ee.FeatureCollection)
    return tile_feature_collection(region)
  else if (region instanceof ee.Feature)
    return tile_geometry(region.geometry())
  else if (region instanceof ee.Geometry)
    return tile_geometry(region)
  else
    throw Error(
      'region must be ee.FeatureCollection, ee.Feature, or ee.Geometry. Was ' + region
    )
}

Map.centerObject(roi, 9);
Map.addLayer(tiles);

//Assign gridcell ID
/////////////////////////////////////////////////////////////////////////////////



//Remove grid-cells within the refugee camps
/////////////////////////////////////////////////////////////////////////////////


//Examine data dates - Dynamic World
//////////////////////////////////////////////////////////////////////////////////

// var distinctYears = lulc.distinct('system:time_start').aggregate_array('system:time_start');

// // Convert each distinct year to a human-readable date
// var humanReadableDates = distinctYears.map(function(time) {
//   var date = ee.Date(time);
//   return date.format("YYYY-MM-dd HH:mm:ss");
// });

// // Print the list of human-readable dates
// print('Distinct years in human-readable format:', humanReadableDates);


// //Winter season composites for zonal statistics
// //////////////////////////////////////////////////////////////////////////////////


// //Jan 2016-Feb 2016
// var lc_16 = lulc
//   .filterDate("2016-01-01", "2016-02-28")
// .reduce(ee.Reducer.mode());

 
// //Jan 2017 to Feb 2017
// var lc_17 = lulc
//   .filterDate("2017-01-01", "2017-02-28")
// .reduce(ee.Reducer.mode());
 

// //Jan 2018 to Feb 2018
// var lc_18 = lulc
//   .filterDate("2018-01-01", "2018-02-28")
// .reduce(ee.Reducer.mode());
 
// //Jan 2019 to Feb 2019
// var lc_19 = lulc
//   .filterDate("2019-01-01", "2019-02-28")
// .reduce(ee.Reducer.mode());
 
 
// //Jan 2019 to Feb 2019
// var lc_19 = lulc
//   .filterDate("2019-01-01", "2019-02-28")
// .reduce(ee.Reducer.mode());

// //Jan 2020 to Feb 2020
// var lc_20 = lulc
//   .filterDate("2020-01-01", "2020-02-28")
// .reduce(ee.Reducer.mode());
 
// //Jan 2021 to Feb 2021
// var lc_21 = lulc
//   .filterDate("2021-01-01", "2021-02-28")
// .reduce(ee.Reducer.mode());
 
 
// //Jan 2022 to Feb 2022
// var lc_22 = lulc
//   .filterDate("2022-01-01", "2022-07-28")
// .reduce(ee.Reducer.mode());

// //Map winter season composites
// //////////////////////////////////////////////////////////////////////////////////

// var dwVisParams = {
//   min: 0, max:8,
//   palette: ['#419bdf', '#397d49', '#88b053', '#7a87c6', '#e49635', '#dfc35a', '#c4281b', '#a59b8f', '	#b39fe1']
// };

// Map.centerObject(roi);

// //Map LULC
// Map.addLayer(lc_16, dwVisParams, 'Land cover 2016');
// Map.addLayer(lc_17, dwVisParams, 'Land cover 2017');
// Map.addLayer(lc_18, dwVisParams, 'Land cover 2018');
// Map.addLayer(lc_19, dwVisParams, 'Land cover 2019');
// Map.addLayer(lc_20, dwVisParams, 'Land cover 2020');
// Map.addLayer(lc_21, dwVisParams, 'Land cover 2021');
// Map.addLayer(lc_22, dwVisParams, 'Land cover 2022');


// //Zonal statistics: percent gridcell of each LULC class for each year of data
// //////////////////////////////////////////////////////////////////////////////////


// //Determine percent of gridcell in protected area
// //////////////////////////////////////////////////////////////////////////////////





// //Determine gridcell's Euclidean distance to all camp boundaries
// //////////////////////////////////////////////////////////////////////////////////




// //Determine percent of gridcell in protected area
// //////////////////////////////////////////////////////////////////////////////////


