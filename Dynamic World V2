/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #98ff00 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[91.71146148381821, 22.067618064973296],
          [91.71146148381821, 20.614582872441776],
          [92.51346343694321, 20.614582872441776],
          [92.51346343694321, 22.067618064973296]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
 
//////////////////////////////////////////////////////////////////////////////////
//
//Call on data
//
//////////////////////////////////////////////////////////////////////////////////


//Cox Bazar shapefile ADD NAIKHONGCHARI
var roi= ee.FeatureCollection("users/salem043/Bangladesh/CB_with_added_upazila");
// Map.addLayer(roi);

var roiGeo = roi.union().geometry();
// Map.addLayer(roiGeo);

//LULC classifications subset to ROI
var lulc = ee.ImageCollection("GOOGLE/DYNAMICWORLD/V1")
 .map(function(image){return image.clip(geometry)})
 .select("label");

//Refugee camps
var camps = ee.FeatureCollection("users/salem043/Bangladesh/Cox_Bazar_Simple_Borders");
// Map.addLayer(camps);

//Protected areas
var protect = ee.FeatureCollection("users/salem043/Bangladesh/Protected_Areas_BGD");
// Map.addLayer(protect);

//////////////////////////////////////////////////////////////////////////////////
//
// Remove areas of ROI within refugee camps
//
//////////////////////////////////////////////////////////////////////////////////


var roiGeo = roiGeo.difference(camps, 1);

// Map.addLayer(roiGeo);



//////////////////////////////////////////////////////////////////////////////////
//
// Define sample grid-cells
//
//////////////////////////////////////////////////////////////////////////////////


var tiles = tile(roiGeo, 0.1); //TURN BACK TO 0.01 deg (or lower)

function tile(region, size_in_degrees) {
  function tile_geometry(geometry) {
    var coords = ee.List(geometry.bounds().coordinates().get(0))
    var min_point = ee.List(coords.get(0))
    var max_point = ee.List(coords.get(2))
  
    function sequence(direction) {
      var start = min_point.get(direction)  
      var stop = ee.Number(max_point.get(direction))
      return ee.List.sequence(start, stop, size_in_degrees)
    }
  
    var tiles = sequence(0).map(function (x) {
      return sequence(1).map(function (y) { 
          return ee.Feature(ee.Geometry.Rectangle([
            [ee.Number(x), ee.Number(y)],
            [
              ee.Number(x).add(size_in_degrees).min(max_point.get(0)),
              ee.Number(y).add(size_in_degrees).min(max_point.get(1))
            ]
        ]).intersection(geometry, 30))
      })
  	}).flatten()
    return ee.FeatureCollection(tiles).filterBounds(geometry)
  }

  function tile_feature_collection(feature_collection) {
    return ee.FeatureCollection(
      feature_collection.iterate(
        function (feature, acc) {
          return ee.FeatureCollection(acc).merge(tile_geometry(ee.Feature(feature).geometry()))
        }, ee.FeatureCollection([]))
    )
  }

  if (region instanceof ee.FeatureCollection)
    return tile_feature_collection(region)
  else if (region instanceof ee.Feature)
    return tile_geometry(region.geometry())
  else if (region instanceof ee.Geometry)
    return tile_geometry(region)
  else
    throw Error(
      'region must be ee.FeatureCollection, ee.Feature, or ee.Geometry. Was ' + region
    )
}

Map.centerObject(roi, 9);
Map.addLayer(tiles);



//////////////////////////////////////////////////////////////////////////////////
//
// Calculate area of each tile
//
//////////////////////////////////////////////////////////////////////////////////


var addArea = function(feature) {
  return feature.set({areaHa: feature.geometry().area().divide(100 * 100)});
};

// Map the area getting function over the FeatureCollection.
var tiles = tiles.map(addArea);

// print("Tiles with area variable", tiles.limit(5));



// ////////////////////////////////////////////////////////////////////////////////

// // Examine dates of data in Dynamic World

// ////////////////////////////////////////////////////////////////////////////////

// var distinctYears = lulc.distinct('system:time_start').aggregate_array('system:time_start');

// // Convert each distinct year to a human-readable date
// var humanReadableDates = distinctYears.map(function(time) {
//   var date = ee.Date(time);
//   return date.format("YYYY-MM-dd HH:mm:ss");
// });

// // Print the list of human-readable dates
// print('Distinct years in human-readable format:', humanReadableDates);


//////////////////////////////////////////////////////////////////////////////////
//
// Determine dry season (Jan-Feb) composites for zonal statistics
//
//////////////////////////////////////////////////////////////////////////////////


//Jan 2016-Feb 2016
var lc_16 = lulc
  .filterDate("2016-01-01", "2016-02-28")
.reduce(ee.Reducer.mode());

 
//Jan 2017 to Feb 2017
var lc_17 = lulc
  .filterDate("2017-01-01", "2017-02-28")
.reduce(ee.Reducer.mode());
 

//Jan 2018 to Feb 2018
var lc_18 = lulc
  .filterDate("2018-01-01", "2018-02-28")
.reduce(ee.Reducer.mode());
 
//Jan 2019 to Feb 2019
var lc_19 = lulc
  .filterDate("2019-01-01", "2019-02-28")
.reduce(ee.Reducer.mode());
 
 
//Jan 2019 to Feb 2019
var lc_19 = lulc
  .filterDate("2019-01-01", "2019-02-28")
.reduce(ee.Reducer.mode());

//Jan 2020 to Feb 2020
var lc_20 = lulc
  .filterDate("2020-01-01", "2020-02-28")
.reduce(ee.Reducer.mode());
 
//Jan 2021 to Feb 2021
var lc_21 = lulc
  .filterDate("2021-01-01", "2021-02-28")
.reduce(ee.Reducer.mode());
 
 
//Jan 2022 to Feb 2022
var lc_22 = lulc
  .filterDate("2022-01-01", "2022-07-28")
.reduce(ee.Reducer.mode());


// //////////////////////////////////////////////////////////////////////////////////
// //
// // Map winter season composites
// //
// //////////////////////////////////////////////////////////////////////////////////

var dwVisParams = {
  min: 0, max:8,
  palette: ['#419bdf', '#397d49', '#88b053', '#7a87c6', '#e49635', '#dfc35a', '#c4281b', '#a59b8f', '	#b39fe1']
};

Map.centerObject(roi);

// // //Map LULC
// // Map.addLayer(lc_16, dwVisParams, 'Land cover 2016');
// // Map.addLayer(lc_17, dwVisParams, 'Land cover 2017');
// // Map.addLayer(lc_18, dwVisParams, 'Land cover 2018');
// // Map.addLayer(lc_19, dwVisParams, 'Land cover 2019');
// // Map.addLayer(lc_20, dwVisParams, 'Land cover 2020');
// // Map.addLayer(lc_21, dwVisParams, 'Land cover 2021');
// // Map.addLayer(lc_22, dwVisParams, 'Land cover 2022');



/////////////////////////////////////////////////////////////////////////////////
//
// Map zonal statistics: defining reclassification function
//
//////////////////////////////////////////////////////////////////////////////////

// Define a reclassification function
var reclassifyImage = function(image, reclassRules) {
  var reclassified = image;
  for (var rule in reclassRules) {
    var classValue = reclassRules[rule][0]; // Original class value
    var newValue = reclassRules[rule][1]; // New class value
    reclassified = reclassified.where(image.eq(classValue), newValue);
  }
  return reclassified;
};

//////////////////////////////////////////////////////////////////////////////////
//
// Zonal statistics: percent forest cover
//
//////////////////////////////////////////////////////////////////////////////////


// Define your reclassification rules as an object
var reclassRules = {
  'Water': [0, 0],
  'Trees': [1, 1],
  'Grasslands': [2, 0],
  'Flooded Vegetation': [3, 0],
  'Crops': [4, 0],
  'Shrubland/Scrubland': [5, 0],
  'Built Area': [6, 0],
  'Bare Ground': [7, 0],
  'Snow and Ice': [8, 0]
};

// Reclassify every data year into a forset
var dta_2016 = reclassifyImage(lc_16, reclassRules);
var dta_2017 = reclassifyImage(lc_17, reclassRules);
var dta_2018 = reclassifyImage(lc_18, reclassRules);
var dta_2019 = reclassifyImage(lc_19, reclassRules);
var dta_2020 = reclassifyImage(lc_20, reclassRules);
var dta_2021 = reclassifyImage(lc_21, reclassRules);
var dta_2022 = reclassifyImage(lc_22, reclassRules);


// // Map check
// var customPalette = ['white', 'green'];
// // Visualize the reclassified image using the custom palette
// Map.addLayer(dta_2016, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2016');
// Map.addLayer(dta_2017, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2017');
// Map.addLayer(dta_2018, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2018');
// Map.addLayer(dta_2019, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2019');
// Map.addLayer(dta_2020, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2020');
// Map.addLayer(dta_2021, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2021');
// Map.addLayer(dta_2022, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2022');


//Apply reducer to 2016 
var tiles = dta_2016.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["forest_2016"]),
  scale: 10, 
});

//Apply reducer to 2017 
var tiles = dta_2017.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["forest_2017"]),
  scale: 10, 
});

//Apply reducer to 2018 
var tiles = dta_2018.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["forest_2018"]),
  scale: 10, 
});

//Apply reducer to 2019 
var tiles = dta_2019.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["forest_2019"]),
  scale: 10, 
});

//Apply reducer to 2020 
var tiles = dta_2020.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["forest_2020"]),
  scale: 10, 
});

//Apply reducer to 2021 
var tiles = dta_2021.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["forest_2021"]),
  scale: 10, 
});

//Apply reducer to 2022
var tiles = dta_2022.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["forest_2022"]),
  scale: 10, 
});


// print(tiles.limit(2));

// //////////////////////////////////////////////////////////////////////////////////
// //
// // Map zonal statistics: percent grasslands cover
// //
// //////////////////////////////////////////////////////////////////////////////////


// Define your reclassification rules as an object
var reclassRules = {
  'Water': [0, 0],
  'Trees': [1, 0],
  'Grasslands': [2, 1],
  'Flooded Vegetation': [3, 0],
  'Crops': [4, 0],
  'Shrubland/Scrubland': [5, 0],
  'Built Area': [6, 0],
  'Bare Ground': [7, 0],
  'Snow and Ice': [8, 0]
};

// Reclassify every data year into a forset
var dta_2016 = reclassifyImage(lc_16, reclassRules);
var dta_2017 = reclassifyImage(lc_17, reclassRules);
var dta_2018 = reclassifyImage(lc_18, reclassRules);
var dta_2019 = reclassifyImage(lc_19, reclassRules);
var dta_2020 = reclassifyImage(lc_20, reclassRules);
var dta_2021 = reclassifyImage(lc_21, reclassRules);
var dta_2022 = reclassifyImage(lc_22, reclassRules);


// Map check
var customPalette = ['white', 'green'];
// Visualize the reclassified image using the custom palette
Map.addLayer(dta_2016, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2016');
Map.addLayer(dta_2017, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2017');
Map.addLayer(dta_2018, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2018');
Map.addLayer(dta_2019, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2019');
Map.addLayer(dta_2020, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2020');
Map.addLayer(dta_2021, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2021');
Map.addLayer(dta_2022, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2022');


//Apply reducer to 2016 
var tiles = dta_2016.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["grass_2016"]),
  scale: 10, 
});

//Apply reducer to 2017 
var tiles = dta_2017.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["grass_2017"]),
  scale: 10, 
});

//Apply reducer to 2018 
var tiles = dta_2018.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["grass_2018"]),
  scale: 10, 
});

//Apply reducer to 2019 
var tiles = dta_2019.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["grass_2019"]),
  scale: 10, 
});

//Apply reducer to 2020 
var tiles = dta_2020.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["grass_2020"]),
  scale: 10, 
});

//Apply reducer to 2021 
var tiles = dta_2021.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["grass_2021"]),
  scale: 10, 
});

//Apply reducer to 2022
var tiles = dta_2022.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["grass_2022"]),
  scale: 10, 
});


print(tiles.limit(2));

// //////////////////////////////////////////////////////////////////////////////////
// //
// // Map zonal statistics: percent flooded vegetative cover
// //
// //////////////////////////////////////////////////////////////////////////////////


// Define your reclassification rules as an object
var reclassRules = {
  'Water': [0, 0],
  'Trees': [1, 0],
  'Grasslands': [2, 0],
  'Flooded Vegetation': [3, 1],
  'Crops': [4, 0],
  'Shrubland/Scrubland': [5, 0],
  'Built Area': [6, 0],
  'Bare Ground': [7, 0],
  'Snow and Ice': [8, 0]
};

// Reclassify every data year into a forset
var dta_2016 = reclassifyImage(lc_16, reclassRules);
var dta_2017 = reclassifyImage(lc_17, reclassRules);
var dta_2018 = reclassifyImage(lc_18, reclassRules);
var dta_2019 = reclassifyImage(lc_19, reclassRules);
var dta_2020 = reclassifyImage(lc_20, reclassRules);
var dta_2021 = reclassifyImage(lc_21, reclassRules);
var dta_2022 = reclassifyImage(lc_22, reclassRules);


// Map check
var customPalette = ['white', 'green'];
// Visualize the reclassified image using the custom palette
Map.addLayer(dta_2016, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2016');
Map.addLayer(dta_2017, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2017');
Map.addLayer(dta_2018, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2018');
Map.addLayer(dta_2019, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2019');
Map.addLayer(dta_2020, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2020');
Map.addLayer(dta_2021, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2021');
Map.addLayer(dta_2022, {min: 0, max: 1, palette: customPalette}, 'Reclassified 2022');


//Apply reducer to 2016 
var tiles = dta_2016.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["flood_2016"]),
  scale: 10, 
});

//Apply reducer to 2017 
var tiles = dta_2017.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["flood_2017"]),
  scale: 10, 
});

//Apply reducer to 2018 
var tiles = dta_2018.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["flood_2018"]),
  scale: 10, 
});

//Apply reducer to 2019 
var tiles = dta_2019.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["flood_2019"]),
  scale: 10, 
});

//Apply reducer to 2020 
var tiles = dta_2020.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["flood_2020"]),
  scale: 10, 
});

//Apply reducer to 2021 
var tiles = dta_2021.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["flood_2021"]),
  scale: 10, 
});

//Apply reducer to 2022
var tiles = dta_2022.reduceRegions({
  collection: tiles,
  reducer: ee.Reducer.mean().setOutputs(["flood_2022"]),
  scale: 10, 
});


// //////////////////////////////////////////////////////////////////////////////////
// //
// // Map zonal statistics: percent agricultural cover
// //
// //////////////////////////////////////////////////////////////////////////////////



// //////////////////////////////////////////////////////////////////////////////////
// //
// // Map zonal statistics: percent shrub/scrub cover
// //
// //////////////////////////////////////////////////////////////////////////////////




// //////////////////////////////////////////////////////////////////////////////////
// //
// // Map zonal statistics: percent built area
// //
// //////////////////////////////////////////////////////////////////////////////////



// //////////////////////////////////////////////////////////////////////////////////
// //
// // Map zonal statistics: percent bare ground
// //
// //////////////////////////////////////////////////////////////////////////////////




// //////////////////////////////////////////////////////////////////////////////////
// //
// // Map zonal statistics: percent tile in protected area
// //
// //////////////////////////////////////////////////////////////////////////////////




// //////////////////////////////////////////////////////////////////////////////////
// //
// // Gridcell Euclidean distance to nearest boundary of each of 7 camp areas
// //
// //////////////////////////////////////////////////////////////////////////////////





// //////////////////////////////////////////////////////////////////////////////////
// //
// // Gridcell Euclidean distance to nearest camp boundary
// //
// //////////////////////////////////////////////////////////////////////////////////







// //////////////////////////////////////////////////////////////////////////////////
// //
// // Define larger tile for standard error clustering and assign tile ID
// //
// //////////////////////////////////////////////////////////////////////////////////








// //////////////////////////////////////////////////////////////////////////////////
// //
// // Find intersection of tile centroid with larger tile and obtain ID
// //
// //////////////////////////////////////////////////////////////////////////////////




