//Writing the entire fucking thing from scratch fuck my fucking life

//Still to do
    //Choose resolution
    //Deal with water in tiles

// PRODUCE SAMPLE GRIDS
////////////////////////////////////////////////////////

  //Call on study area
  var area = ee.FeatureCollection('users/salem043/ROI_V2_2023');
  //Map.addLayer(area, {}, "Study area");

  //print(area);

  // Specify grid size in projection, x and y units (based on projection).
  var projection='EPSG:4326'; // WGS84 lat lon
  var dx=0.01;
  var dy=0.01;

  // Make grid and visualize.
  var proj=ee.Projection(projection).scale(dx, dy);
  var grid=area.geometry().coveringGrid(proj);

  
//print(grid.limit(10), "Original grid");
  
  
//////////////////////////////////////////////////////////  
//
//Percent Forest - MODIS 2000-2020
//
//////////////////////////////////////////////////////////

var data = ee.ImageCollection('MODIS/006/MOD44B');
//print(data, "MODIS");
var name = "Percent_Tree_Cover"

//2000
var tree = data.filter(ee.Filter.date('2000-01-01', '2000-12-31'))
.map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor00");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2001
var tree = data.filter(ee.Filter.date('2001-01-01', '2001-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor01");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2002
var tree = data.filter(ee.Filter.date('2002-01-01', '2002-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor02");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2003
var tree = data.filter(ee.Filter.date('2003-01-01', '2003-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor03");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2004
var tree = data.filter(ee.Filter.date('2004-01-01', '2004-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor04");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2005
var tree = data.filter(ee.Filter.date('2005-01-01', '2005-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor05");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2006
var tree = data.filter(ee.Filter.date('2006-01-01', '2006-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor06");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2007
var tree = data.filter(ee.Filter.date('2007-01-01', '2007-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor07");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2008
var tree = data.filter(ee.Filter.date('2008-01-01', '2008-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor08");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2009
var tree = data.filter(ee.Filter.date('2009-01-01', '2009-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor09");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2010
var tree = data.filter(ee.Filter.date('2010-01-01', '2010-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor10");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2011
var tree = data.filter(ee.Filter.date('2011-01-01', '2011-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor11");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2012
var tree = data.filter(ee.Filter.date('2012-01-01', '2012-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor12");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2013
var tree = data.filter(ee.Filter.date('2013-01-01', '2013-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor13");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2014
var tree = data.filter(ee.Filter.date('2014-01-01', '2014-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor14");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2015
var tree = data.filter(ee.Filter.date('2015-01-01', '2015-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor15");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2016
var tree = data.filter(ee.Filter.date('2016-01-01', '2016-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor16");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2017
var tree = data.filter(ee.Filter.date('2017-01-01', '2017-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor17");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2018
var tree = data.filter(ee.Filter.date('2018-01-01', '2018-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor18");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2019
var tree = data.filter(ee.Filter.date('2019-01-01', '2019-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor19");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2020
var tree = data.filter(ee.Filter.date('2020-01-01', '2020-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctFor20");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});



//////////////////////////////////////////////////////////  
//
//Percent veg - MODIS 2000-2020
//
//////////////////////////////////////////////////////////

var name = "Percent_NonTree_Vegetation";

//2000
var tree = data.filter(ee.Filter.date('2000-01-01', '2000-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg00");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2001
var tree = data.filter(ee.Filter.date('2001-01-01', '2001-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg01");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2002
var tree = data.filter(ee.Filter.date('2002-01-01', '2002-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg02");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2003
var tree = data.filter(ee.Filter.date('2003-01-01', '2003-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg03");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2004
var tree = data.filter(ee.Filter.date('2004-01-01', '2004-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg04");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2005
var tree = data.filter(ee.Filter.date('2005-01-01', '2005-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg05");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2006
var tree = data.filter(ee.Filter.date('2006-01-01', '2006-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg06");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2007
var tree = data.filter(ee.Filter.date('2007-01-01', '2007-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg07");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2008
var tree = data.filter(ee.Filter.date('2008-01-01', '2008-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg08");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2009
var tree = data.filter(ee.Filter.date('2009-01-01', '2009-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg09");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2010
var tree = data.filter(ee.Filter.date('2010-01-01', '2010-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg10");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2011
var tree = data.filter(ee.Filter.date('2011-01-01', '2011-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg11");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2012
var tree = data.filter(ee.Filter.date('2012-01-01', '2012-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg12");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2013
var tree = data.filter(ee.Filter.date('2013-01-01', '2013-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg13");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2014
var tree = data.filter(ee.Filter.date('2014-01-01', '2014-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg14");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2015
var tree = data.filter(ee.Filter.date('2015-01-01', '2015-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg15");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2016
var tree = data.filter(ee.Filter.date('2016-01-01', '2016-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg16");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2017
var tree = data.filter(ee.Filter.date('2017-01-01', '2017-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg17");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2018
var tree = data.filter(ee.Filter.date('2018-01-01', '2018-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg18");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2019
var tree = data.filter(ee.Filter.date('2019-01-01', '2019-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg19");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2020
var tree = data.filter(ee.Filter.date('2020-01-01', '2020-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctVeg20");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//print(grid.limit(10),"Grid with first two MODIS");


//////////////////////////////////////////////////////////////////////////////
//
//Percent nonvegetated
//
/////////////////////////////////////////////////////////////////////////////

name = "Percent_NonVegetated";

//2000
var tree = data.filter(ee.Filter.date('2000-01-01', '2000-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon00");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2001
var tree = data.filter(ee.Filter.date('2001-01-01', '2001-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon01");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2002
var tree = data.filter(ee.Filter.date('2002-01-01', '2002-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon02");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2003
var tree = data.filter(ee.Filter.date('2003-01-01', '2003-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon03");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2004
var tree = data.filter(ee.Filter.date('2004-01-01', '2004-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon04");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2005
var tree = data.filter(ee.Filter.date('2005-01-01', '2005-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon05");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2006
var tree = data.filter(ee.Filter.date('2006-01-01', '2006-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon06");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2007
var tree = data.filter(ee.Filter.date('2007-01-01', '2007-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon07");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2008
var tree = data.filter(ee.Filter.date('2008-01-01', '2008-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon08");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2009
var tree = data.filter(ee.Filter.date('2009-01-01', '2009-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon09");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2010
var tree = data.filter(ee.Filter.date('2010-01-01', '2010-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon10");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2011
var tree = data.filter(ee.Filter.date('2011-01-01', '2011-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon11");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2012
var tree = data.filter(ee.Filter.date('2012-01-01', '2012-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon12");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2013
var tree = data.filter(ee.Filter.date('2013-01-01', '2013-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon13");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2014
var tree = data.filter(ee.Filter.date('2014-01-01', '2014-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon14");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2015
var tree = data.filter(ee.Filter.date('2015-01-01', '2015-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon15");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2016
var tree = data.filter(ee.Filter.date('2016-01-01', '2016-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon16");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2017
var tree = data.filter(ee.Filter.date('2017-01-01', '2017-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon17");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2018
var tree = data.filter(ee.Filter.date('2018-01-01', '2018-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon18");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2019
var tree = data.filter(ee.Filter.date('2019-01-01', '2019-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon19");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2020
var tree = data.filter(ee.Filter.date('2020-01-01', '2020-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("PctNon20");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//print(grid.limit(10),"Grid with first three MODIS");

//////////////////////////////////////////////////////////////////////
//
//////Quality MODIS 
//
/////////////////////////////////////////////////////////////////////

name = "Quality";

//2000
var tree = data.filter(ee.Filter.date('2000-01-01', '2000-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual00");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2001
var tree = data.filter(ee.Filter.date('2001-01-01', '2001-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual01");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2002
var tree = data.filter(ee.Filter.date('2002-01-01', '2002-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual02");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2003
var tree = data.filter(ee.Filter.date('2003-01-01', '2003-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual03");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2004
var tree = data.filter(ee.Filter.date('2004-01-01', '2004-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual04");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2005
var tree = data.filter(ee.Filter.date('2005-01-01', '2005-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual05");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2006
var tree = data.filter(ee.Filter.date('2006-01-01', '2006-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual06");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2007
var tree = data.filter(ee.Filter.date('2007-01-01', '2007-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual07");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2008
var tree = data.filter(ee.Filter.date('2008-01-01', '2008-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual08");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2009
var tree = data.filter(ee.Filter.date('2009-01-01', '2009-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual09");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2010
var tree = data.filter(ee.Filter.date('2010-01-01', '2010-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual10");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2011
var tree = data.filter(ee.Filter.date('2011-01-01', '2011-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual11");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2012
var tree = data.filter(ee.Filter.date('2012-01-01', '2012-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual12");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2013
var tree = data.filter(ee.Filter.date('2013-01-01', '2013-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual13");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2014
var tree = data.filter(ee.Filter.date('2014-01-01', '2014-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual14");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2015
var tree = data.filter(ee.Filter.date('2015-01-01', '2015-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual15");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2016
var tree = data.filter(ee.Filter.date('2016-01-01', '2016-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual16");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2017
var tree = data.filter(ee.Filter.date('2017-01-01', '2017-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual17");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2018
var tree = data.filter(ee.Filter.date('2018-01-01', '2018-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual18");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2019
var tree = data.filter(ee.Filter.date('2019-01-01', '2019-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual19");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2020
var tree = data.filter(ee.Filter.date('2020-01-01', '2020-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Qual20");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//print(grid.limit(10),"Grid with first four MODIS");

////////////////////////////////////////////////////////
//
//Cloud cover, MODIS
//
////////////////////////////////////////////////////////

name = "Cloud";

//2000
var tree = data.filter(ee.Filter.date('2000-01-01', '2000-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud00");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2001
var tree = data.filter(ee.Filter.date('2001-01-01', '2001-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud01");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2002
var tree = data.filter(ee.Filter.date('2002-01-01', '2002-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud02");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2003
var tree = data.filter(ee.Filter.date('2003-01-01', '2003-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud03");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2004
var tree = data.filter(ee.Filter.date('2004-01-01', '2004-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud04");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2005
var tree = data.filter(ee.Filter.date('2005-01-01', '2005-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud05");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2006
var tree = data.filter(ee.Filter.date('2006-01-01', '2006-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud06");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2007
var tree = data.filter(ee.Filter.date('2007-01-01', '2007-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud07");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2008
var tree = data.filter(ee.Filter.date('2008-01-01', '2008-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud08");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2009
var tree = data.filter(ee.Filter.date('2009-01-01', '2009-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud09");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2010
var tree = data.filter(ee.Filter.date('2010-01-01', '2010-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud10");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2011
var tree = data.filter(ee.Filter.date('2011-01-01', '2011-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud11");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2012
var tree = data.filter(ee.Filter.date('2012-01-01', '2012-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud12");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2013
var tree = data.filter(ee.Filter.date('2013-01-01', '2013-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud13");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2014
var tree = data.filter(ee.Filter.date('2014-01-01', '2014-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud14");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2015
var tree = data.filter(ee.Filter.date('2015-01-01', '2015-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud15");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2016
var tree = data.filter(ee.Filter.date('2016-01-01', '2016-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud16");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2017
var tree = data.filter(ee.Filter.date('2017-01-01', '2017-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud17");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2018
var tree = data.filter(ee.Filter.date('2018-01-01', '2018-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud18");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2019
var tree = data.filter(ee.Filter.date('2019-01-01', '2019-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud19");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2020
var tree = data.filter(ee.Filter.date('2020-01-01', '2020-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var tree = tree.rename("Cloud20");

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//print(grid.limit(10),"Grid with first four MODIS");


//////////////////////////////////////////////////////
//
// Hansen num. pixels
//
///////////////////////////////////////////////////////

var Hansen = ee.Image("UMD/hansen/global_forest_change_2022_v1_10").clip(area);
var lossYr = Hansen.select("lossyear")
var cover00 = Hansen.select("treecover2000").rename("npix_gfc")

var grid = grid.map(function(feature) {
  return feature.set(cover00.reduceRegion({
    reducer: 'count',
    geometry: feature.geometry()
  }));
});



//////////////////////////////////////////////////////
//
// Hansen num. pixels lost by year
//
///////////////////////////////////////////////////////

// indices for years you want to calculate stats for (2001 to 2014) 
var indices = ee.List.sequence(1,20);

// map over feature collection 
var grid = grid.map(function(feature){
  
  // iterate over years of interest. could modify this so you iterate over years
  // depending on how the GFC image is masked 
  var mdata = indices.iterate(function(i, dictin){
    
    // get year for this iteration 
    var thisyear = i ;

    // create property name for this year (e.g. "loss2001" for first iteration)
    var bandname = ee.String('loss').cat(ee.Number(thisyear).int()) ;
    
    var gfcLossthisyear = lossYr.remap([i], [1], null);
    
    var dict = gfcLossthisyear
    
      // rename band such that the end dictionary key is unique to this year 
      .rename(bandname)
      
      // get zonal statistics 
      .reduceRegion({reducer:'count', geometry: feature.geometry(), scale: 100})
      
    // append zonal statistics for this year to dictionary 
    return ee.Dictionary(dictin).combine(dict)
    
  }, ee.Dictionary()) // begin iteration with an empty dictionary  

  // return feature with zonal stats accumulated from all years 
  return feature.set(mdata)

})

//print(grid.limit(10), "GEE with most of Hansen");

////////////////////////////////////////////////////////
//
//Hansen pct forest cover 2000
//
////////////////////////////////////////////////////////

var cover00 = Hansen.select("treecover2000").rename("for00_gfc")

var grid = grid.map(function(feature) {
  return feature.set(cover00.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
  }));
});

////////////////////////////////////////////////////////
//
//World Settlement Footprint - mean settlement by year
//
////////////////////////////////////////////////////////

var WSF85_15 = ee.Image("users/salem043/WSF_85_15");
//print(WSF85_15)

//2000
var WSF = ee.Image(1).select("constant").rename("set_2000")
      .where(WSF85_15.gt(0).and(WSF85_15.lte(2000)), 1)
      .where(WSF85_15.gt(2000), 0)
      .where(WSF85_15.eq(0), 0)
      
var grid = grid.map(function(feature) {
  return feature.set(WSF.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
    crs: "EPSG:4326", scale: 10
  }));
});

//2001
var WSF = ee.Image(1).select("constant").rename("set_2001")
      .where(WSF85_15.gt(0).and(WSF85_15.lte(2001)), 1)
      .where(WSF85_15.gt(2001), 0)
      .where(WSF85_15.eq(0), 0)
      
var grid = grid.map(function(feature) {
  return feature.set(WSF.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
    crs: "EPSG:4326", scale: 10
  }));
});

//2002
var WSF = ee.Image(1).select("constant").rename("set_2002")
      .where(WSF85_15.gt(0).and(WSF85_15.lte(2002)), 1)
      .where(WSF85_15.gt(2002), 0)
      .where(WSF85_15.eq(0), 0)
      
var grid = grid.map(function(feature) {
  return feature.set(WSF.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
    crs: "EPSG:4326", scale: 10
  }));
});

//2003
var WSF = ee.Image(1).select("constant").rename("set_2003")
      .where(WSF85_15.gt(0).and(WSF85_15.lte(2003)), 1)
      .where(WSF85_15.gt(2003), 0)
      .where(WSF85_15.eq(0), 0)
      
var grid = grid.map(function(feature) {
  return feature.set(WSF.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
    crs: "EPSG:4326", scale: 10
  }));
});

//2004
var WSF = ee.Image(1).select("constant").rename("set_2004")
      .where(WSF85_15.gt(0).and(WSF85_15.lte(2004)), 1)
      .where(WSF85_15.gt(2004), 0)
      .where(WSF85_15.eq(0), 0)
      
var grid = grid.map(function(feature) {
  return feature.set(WSF.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
    crs: "EPSG:4326", scale: 10
  }));
});

//2005
var WSF = ee.Image(1).select("constant").rename("set_2005")
      .where(WSF85_15.gt(0).and(WSF85_15.lte(2005)), 1)
      .where(WSF85_15.gt(2005), 0)
      .where(WSF85_15.eq(0), 0)
      
var grid = grid.map(function(feature) {
  return feature.set(WSF.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
    crs: "EPSG:4326", scale: 10
  }));
});

//2006
var WSF = ee.Image(1).select("constant").rename("set_2006")
      .where(WSF85_15.gt(0).and(WSF85_15.lte(2006)), 1)
      .where(WSF85_15.gt(2006), 0)
      .where(WSF85_15.eq(0), 0)
      
var grid = grid.map(function(feature) {
  return feature.set(WSF.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
    crs: "EPSG:4326", scale: 10
  }));
});


//2007
var WSF = ee.Image(1).select("constant").rename("set_2007")
      .where(WSF85_15.gt(0).and(WSF85_15.lte(2007)), 1)
      .where(WSF85_15.gt(2007), 0)
      .where(WSF85_15.eq(0), 0)
      
var grid = grid.map(function(feature) {
  return feature.set(WSF.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
    crs: "EPSG:4326", scale: 10
  }));
});


//2008
var WSF = ee.Image(1).select("constant").rename("set_2008")
      .where(WSF85_15.gt(0).and(WSF85_15.lte(2008)), 1)
      .where(WSF85_15.gt(2008), 0)
      .where(WSF85_15.eq(0), 0)
      
var grid = grid.map(function(feature) {
  return feature.set(WSF.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
    crs: "EPSG:4326", scale: 10
  }));
});

//2009
var WSF = ee.Image(1).select("constant").rename("set_2009")
      .where(WSF85_15.gt(0).and(WSF85_15.lte(2009)), 1)
      .where(WSF85_15.gt(2009), 0)
      .where(WSF85_15.eq(0), 0)
      
var grid = grid.map(function(feature) {
  return feature.set(WSF.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
    crs: "EPSG:4326", scale: 10
  }));
});

//2010
var WSF = ee.Image(1).select("constant").rename("set_2010")
      .where(WSF85_15.gt(0).and(WSF85_15.lte(2010)), 1)
      .where(WSF85_15.gt(2010), 0)
      .where(WSF85_15.eq(0), 0)
      
var grid = grid.map(function(feature) {
  return feature.set(WSF.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
    crs: "EPSG:4326", scale: 10
  }));
});

//2011
var WSF = ee.Image(1).select("constant").rename("set_2011")
      .where(WSF85_15.gt(0).and(WSF85_15.lte(2011)), 1)
      .where(WSF85_15.gt(2011), 0)
      .where(WSF85_15.eq(0), 0)
      
var grid = grid.map(function(feature) {
  return feature.set(WSF.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
    crs: "EPSG:4326", scale: 10
  }));
});

//2012
var WSF = ee.Image(1).select("constant").rename("set_2012")
      .where(WSF85_15.gt(0).and(WSF85_15.lte(2012)), 1)
      .where(WSF85_15.gt(2012), 0)
      .where(WSF85_15.eq(0), 0)
      
var grid = grid.map(function(feature) {
  return feature.set(WSF.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
    crs: "EPSG:4326", scale: 10
  }));
});

//2013
var WSF = ee.Image(1).select("constant").rename("set_2013")
      .where(WSF85_15.gt(0).and(WSF85_15.lte(2013)), 1)
      .where(WSF85_15.gt(2013), 0)
      .where(WSF85_15.eq(0), 0)
      
var grid = grid.map(function(feature) {
  return feature.set(WSF.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
    crs: "EPSG:4326", scale: 10
  }));
});

//2014
var WSF = ee.Image(1).select("constant").rename("set_2014")
      .where(WSF85_15.gt(0).and(WSF85_15.lte(2014)), 1)
      .where(WSF85_15.gt(2014), 0)
      .where(WSF85_15.eq(0), 0)
      
var grid = grid.map(function(feature) {
  return feature.set(WSF.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
    crs: "EPSG:4326", scale: 10
  }));
});

//2015
var WSF = ee.Image(1).select("constant").rename("set_2015")
      .where(WSF85_15.gt(0).and(WSF85_15.lte(2015)), 1)
      .where(WSF85_15.gt(2015), 0)
      .where(WSF85_15.eq(0), 0)
      
var grid = grid.map(function(feature) {
  return feature.set(WSF.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
    crs: "EPSG:4326", scale: 10
  }));
});

//2015 GOOD
var WSF15 = ee.Image('DLR/WSF/WSF2015/v1')

var WSF15 = WSF15.where(WSF15.eq(0), 0)
.where(WSF15.eq(255), 1).clip(area).clip(area).rename("set2_2015");


var grid = grid.map(function(feature) {
  return feature.set(WSF15.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
    crs: "EPSG:4326", scale: 10
  }));
});

//2019
var WSF19 = ee.Image("users/salem043/WSF19clean")
.select("b1").rename("set_2019");

//Map.addLayer(WSF);
//Map.addLayer(WSF19);
//Map.addLayer(grid.limit(10));

var grid = grid.map(function(feature) {
  return feature.set(WSF19.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
    crs: "EPSG:4326", scale: 10
  }));
});

print(grid.limit(10));


////////////////////////////////////////////////////
//
// Centroid of gridcells
//
//////////////////////////////////////////////////


var getCentroids = function(feature) {
  return feature.set({centralPoint: feature.centroid(0.1)});
};

var tileCenter = grid.map(getCentroids);

var tileCentroids = tileCenter.map(function(f) {
  var centroid = ee.Feature(ee.List(f.get('centralPoint')));
  return centroid;
});
///Map.addLayer(tileCentroids);

print(tileCentroids.limit(3), 'centroids');


////////////////////////////////////////////////////
//
// Protected area
//
//////////////////////////////////////////////////
var parks = ee.FeatureCollection("WCMC/WDPA/current/polygons")
.filterBounds(area);

Map.addLayer(parks);
print(parks);


var properties = ["DESIG_ENG","MANAG_AUTH", "NAME"];

// Define a spatial filter as geometries that intersect.
var spatialFilter = ee.Filter.intersects({
  leftField: '.geo',
  rightField: '.geo'
});

// Join the points and polygons and apply the spatial filter to keep only intersecting ones
var joinAll = ee.Join.saveAll('matched').apply(tileCentroids, parks, spatialFilter);

// Since the join adds intersecting polygons to a new property 'matched'
// we need to extract required info from the polygons and copy it to the points
var ecosample = joinAll.map(function(feature){
  var joinedFeat =  ee.List(feature.get('matched'));
  var polygon = ee.Feature(ee.FeatureCollection(joinedFeat).first());
  return ee.Feature(feature.copyProperties(polygon, properties)).select(properties);
});

print('sample extract', ecosample.limit(1));


////////////////////////////////////////////////////
//
// Minimum distance to camps
//
//////////////////////////////////////////////////
var camps = ee.FeatureCollection("users/salem043/Cox_Bazar_camps")
Map.addLayer(camps, {col: "red"}, "Camps")