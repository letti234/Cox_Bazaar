//Writing the entire fucking thing from scratch fuck my fucking life

// PRODUCE SAMPLE GRIDS
////////////////////////////////////////////////////////

  //Call on study area
  var area = ee.FeatureCollection('users/salem043/ROI_V2_2023');
  Map.addLayer(area, {}, "Study area");

  print(area);

  // Specify grid size in projection, x and y units (based on projection).
  var projection='EPSG:4326'; // WGS84 lat lon
  var dx=0.01;
  var dy=0.01;

  // Make grid and visualize.
  var proj=ee.Projection(projection).scale(dx, dy);
  var grid=area.geometry().coveringGrid(proj);

  Map.addLayer(grid,{}, 'grid');
  print(grid.limit(10), "Original grid");
  
  
//////////////////////////////////////////////////////////  
//
//Percent Forest - MODIS 2000-2020
//
//////////////////////////////////////////////////////////

var data = ee.ImageCollection('MODIS/006/MOD44B');
var name = "Percent_Tree_Cover"

//2000
var tree = data.filter(ee.Filter.date('2000-01-01', '2000-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2001
var tree = data.filter(ee.Filter.date('2001-01-01', '2001-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2002
var tree = data.filter(ee.Filter.date('2002-01-01', '2002-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2003
var tree = data.filter(ee.Filter.date('2003-01-01', '2003-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2004
var tree = data.filter(ee.Filter.date('2004-01-01', '2004-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2005
var tree = data.filter(ee.Filter.date('2005-01-01', '2005-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2006
var tree = data.filter(ee.Filter.date('2006-01-01', '2006-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2007
var tree = data.filter(ee.Filter.date('2007-01-01', '2007-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2008
var tree = data.filter(ee.Filter.date('2008-01-01', '2008-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2009
var tree = data.filter(ee.Filter.date('2009-01-01', '2009-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2010
var tree = data.filter(ee.Filter.date('2010-01-01', '2010-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2011
var tree = data.filter(ee.Filter.date('2011-01-01', '2011-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2012
var tree = data.filter(ee.Filter.date('2012-01-01', '2012-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2013
var tree = data.filter(ee.Filter.date('2013-01-01', '2013-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2014
var tree = data.filter(ee.Filter.date('2014-01-01', '2014-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2015
var tree = data.filter(ee.Filter.date('2015-01-01', '2015-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2016
var tree = data.filter(ee.Filter.date('2016-01-01', '2016-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2017
var tree = data.filter(ee.Filter.date('2017-01-01', '2017-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2018
var tree = data.filter(ee.Filter.date('2018-01-01', '2018-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2019
var tree = data.filter(ee.Filter.date('2019-01-01', '2019-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2020
var tree = data.filter(ee.Filter.date('2020-01-01', '2020-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});



//////////////////////////////////////////////////////////  
//
//Percent veg - MODIS 2000-2020
//
//////////////////////////////////////////////////////////

//2000
var tree = data.filter(ee.Filter.date('2000-01-01', '2000-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2001
var tree = data.filter(ee.Filter.date('2001-01-01', '2001-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2002
var tree = data.filter(ee.Filter.date('2002-01-01', '2002-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2003
var tree = data.filter(ee.Filter.date('2003-01-01', '2003-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2004
var tree = data.filter(ee.Filter.date('2004-01-01', '2004-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2005
var tree = data.filter(ee.Filter.date('2005-01-01', '2005-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2006
var tree = data.filter(ee.Filter.date('2006-01-01', '2006-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2007
var tree = data.filter(ee.Filter.date('2007-01-01', '2007-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2008
var tree = data.filter(ee.Filter.date('2008-01-01', '2008-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2009
var tree = data.filter(ee.Filter.date('2009-01-01', '2009-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2010
var tree = data.filter(ee.Filter.date('2010-01-01', '2010-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2011
var tree = data.filter(ee.Filter.date('2011-01-01', '2011-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2012
var tree = data.filter(ee.Filter.date('2012-01-01', '2012-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2013
var tree = data.filter(ee.Filter.date('2013-01-01', '2013-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2014
var tree = data.filter(ee.Filter.date('2014-01-01', '2014-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2015
var tree = data.filter(ee.Filter.date('2015-01-01', '2015-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2016
var tree = data.filter(ee.Filter.date('2016-01-01', '2016-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2017
var tree = data.filter(ee.Filter.date('2017-01-01', '2017-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2018
var tree = data.filter(ee.Filter.date('2018-01-01', '2018-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});

//2019
var tree = data.filter(ee.Filter.date('2019-01-01', '2019-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});


//2020
var tree = data.filter(ee.Filter.date('2020-01-01', '2020-12-31')).map(function(image){return image.clip(area)}).select(name).toBands();

var grid = grid.map(function(feature) {
  return feature.set(tree.reduceRegion({
    reducer: 'mean', geometry: feature.geometry(),
  }));
});













///Camp Measurements - distance to camp, intersects camp
///////////////////////////////////////////////////////

  
  
  
  //Remove tiles that intersect camps
  